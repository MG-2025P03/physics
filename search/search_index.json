{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This is the website for Meynard Gilhang's Physics activities. This is my first time to use GitHub and i'm still grasping trying to adapt and learn the new scripting languages that are being presented as part of this solution. I am a B.S. Computer Science in the Philippines and I've been a programmer since. I am your typical IT specialist (jack-of-all trades) with the following background: * Multimedia developer (technology no longer available) * Help authoring specialists (InstallShield) * Web developer (Macromededia ColdFusion, Classic ASP and .Net (vba/c#)) * Data specialist (SQL Integration Services, and Reporting Services) * Business Intelligence Developer using Microsoft Power Plastform (Power Apps, Power Automate and Power BI) I am currently working as a Power Apps Developer processing remote tasks for a US client. Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) c GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"This is the website for Meynard Gilhang's Physics activities. This is my first time to use GitHub and i'm still grasping trying to adapt and learn the new scripting languages that are being presented as part of this solution. I am a B.S. Computer Science in the Philippines and I've been a programmer since. I am your typical IT specialist (jack-of-all trades) with the following background: * Multimedia developer (technology no longer available) * Help authoring specialists (InstallShield) * Web developer (Macromededia ColdFusion, Classic ASP and .Net (vba/c#)) * Data specialist (SQL Integration Services, and Reporting Services) * Business Intelligence Developer using Microsoft Power Plastform (Power Apps, Power Automate and Power BI) I am currently working as a Power Apps Developer processing remote tasks for a US client.","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) c GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/","text":"Theoretical Foundation The governing equations of motion can be expressed as differential equations, such as \\( m \\frac{d^2x}{dt^2} = F(x, t) \\) for one dimension. Variations in initial conditions lead to different solutions representing various trajectories. The example of a simple harmonic oscillator is given by \\( x(t) = A \\cos(\\omega t + \\phi) \\) . Overview of Projectile Motion Projectile motion refers to the motion of an object that is projected into the air and is subject to the force of gravity. The analysis of projectile motion involves understanding how various parameters affect its trajectory, such as the angle of projection, initial velocity, and gravitational acceleration. Governing Equations of Motion The motion of a projectile can be analyzed using the following equations derived from Newton's laws and kinematics. Equations of Motion: The projectile is influenced by gravitational acceleration ( g ), which acts downward. The two-dimensional motion can be broken down into horizontal and vertical components. Horizontal Motion: [ x(t) = v_0 \\cdot \\cos(\\theta) \\cdot t ] Vertical Motion: [ y(t) = h + v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 ] Here, ( v_0 ) is the initial velocity, ( \\theta ) is the angle of projection, ( h ) is the initial height from which the projectile is launched, and ( g ) is the acceleration due to gravity (approximately ( 9.81 , \\text{m/s}^2 )). Range of the Projectile: The range ( R ) of the projectile (the horizontal distance it travels before landing) can be derived from the above equations. For a launch from ground level (( h = 0 )), the range is given by: [ R = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} ] Family of Solutions The range ( R ) varies based on the launch angle ( \\theta ) and initial velocity ( v_0 ). By varying these parameters, we obtain a family of solutions, each representing a different trajectory. Graphical Representation To illustrate the dependence of the range on the angle of projection, we can plot the range for various angles of projection for a given initial velocity. Projectile Motion Analysis2 Initial Velocity (m/s): Plot Range function calculateRange(v0, angle) { const g = 9.81; // acceleration due to gravity (m/s^2) return (v0 ** 2 * Math.sin(2 * angle * Math.PI / 180)) / g; } function plotProjectileMotion() { const initialVelocity = parseFloat(document.getElementById(\"initialVelocity\").value); const canvas = document.getElementById(\"motionCanvas\"); const ctx = canvas.getContext(\"2d\"); // Clear the canvas ctx.clearRect(0, 0, canvas.width, canvas.height); ctx.beginPath(); const angles = Array.from({length: 91}, (_, i) => i); // angles from 0 to 90 const ranges = angles.map(angle => calculateRange(initialVelocity, angle)); // Plotting ctx.moveTo(50, canvas.height - 50); // move to the starting point angles.forEach((angle, index) => { const x = angle * (canvas.width - 100) / 90 + 50; // Scale x to canvas width const y = canvas.height - (ranges[index] * (canvas.height - 100) / Math.max(...ranges)); // Scale y to canvas height ctx.lineTo(x, y); }); ctx.strokeStyle = \"blue\"; ctx.stroke(); // Axes ctx.beginPath(); ctx.moveTo(50, 350); ctx.lineTo(50, 50); ctx.lineTo(750, 350); ctx.stroke(); // Labels ctx.fillStyle = \"black\"; ctx.fillText(\"Angle of Projection (degrees)\", 350, 380); ctx.fillText(\"Range (m)\", 10, 20); } Conclusion Projectile motion is a fascinating topic that elegantly combines physics and mathematics. By manipulating the initial conditions, such as the angle of projection and initial velocity, one can observe a wide variety of trajectories, each providing insights into the principles governing motion. The graphical representations help to visualize these relationships, enhancing our understanding of projectile dynamics.","title":"Theoretical Foundation"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/#theoretical-foundation","text":"The governing equations of motion can be expressed as differential equations, such as \\( m \\frac{d^2x}{dt^2} = F(x, t) \\) for one dimension. Variations in initial conditions lead to different solutions representing various trajectories. The example of a simple harmonic oscillator is given by \\( x(t) = A \\cos(\\omega t + \\phi) \\) . Overview of Projectile Motion Projectile motion refers to the motion of an object that is projected into the air and is subject to the force of gravity. The analysis of projectile motion involves understanding how various parameters affect its trajectory, such as the angle of projection, initial velocity, and gravitational acceleration. Governing Equations of Motion The motion of a projectile can be analyzed using the following equations derived from Newton's laws and kinematics. Equations of Motion: The projectile is influenced by gravitational acceleration ( g ), which acts downward. The two-dimensional motion can be broken down into horizontal and vertical components. Horizontal Motion: [ x(t) = v_0 \\cdot \\cos(\\theta) \\cdot t ] Vertical Motion: [ y(t) = h + v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 ] Here, ( v_0 ) is the initial velocity, ( \\theta ) is the angle of projection, ( h ) is the initial height from which the projectile is launched, and ( g ) is the acceleration due to gravity (approximately ( 9.81 , \\text{m/s}^2 )). Range of the Projectile: The range ( R ) of the projectile (the horizontal distance it travels before landing) can be derived from the above equations. For a launch from ground level (( h = 0 )), the range is given by: [ R = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} ] Family of Solutions The range ( R ) varies based on the launch angle ( \\theta ) and initial velocity ( v_0 ). By varying these parameters, we obtain a family of solutions, each representing a different trajectory. Graphical Representation To illustrate the dependence of the range on the angle of projection, we can plot the range for various angles of projection for a given initial velocity.","title":"Theoretical Foundation"},{"location":"Physics/1%20Mechanics/2.RangeAnalysis/","text":"Range Analysis Derive the range formula: \\( \\(R = \\frac{v^2 \\sin(2\\theta)}{g}\\) \\) . Analyze the dependence on \ud835\udf03: Identify the optimal angle (45\u2218) for maximum range in ideal conditions. Investigate how the range changes with variations in \ud835\udc63 and \ud835\udc54, observing proportional relationships. Discuss edge cases, such as when \ud835\udf03 = 0\u2218 (horizontal projection) or 90\u2218 (vertical projection).","title":"Range Analysis"},{"location":"Physics/1%20Mechanics/2.RangeAnalysis/#range-analysis","text":"Derive the range formula: \\( \\(R = \\frac{v^2 \\sin(2\\theta)}{g}\\) \\) . Analyze the dependence on \ud835\udf03: Identify the optimal angle (45\u2218) for maximum range in ideal conditions. Investigate how the range changes with variations in \ud835\udc63 and \ud835\udc54, observing proportional relationships. Discuss edge cases, such as when \ud835\udf03 = 0\u2218 (horizontal projection) or 90\u2218 (vertical projection).","title":"Range Analysis"},{"location":"Physics/1%20Mechanics/3.PracticalApplications/","text":"Practical Applications Examine real-world factors like air resistance, uneven terrain, and varying gravity (e.g., on other planets). Discuss scenarios like sports (soccer, basketball) and aerospace engineering (rocket launches). Explore how launch height affects the trajectory and range.","title":"Practical Applications"},{"location":"Physics/1%20Mechanics/3.PracticalApplications/#practical-applications","text":"Examine real-world factors like air resistance, uneven terrain, and varying gravity (e.g., on other planets). Discuss scenarios like sports (soccer, basketball) and aerospace engineering (rocket launches). Explore how launch height affects the trajectory and range.","title":"Practical Applications"},{"location":"Physics/1%20Mechanics/4.Implementation/","text":"Implementation Write a simulation program (e.g., in Python or MATLAB) using numerical methods to solve projectile motion equations. Generate plots for the range as a function of projection angle under varying initial conditions (e.g., \ud835\udc63, \ud835\udc54, launch height). Example visualization: polar or Cartesian plots highlighting key relationships. Visualization Sample Code (Python): python import numpy as np import matplotlib.pyplot as plt Parameters g = 9.8 # Gravity (m/s^2) v = 20 # Initial velocity (m/s) angles = np.linspace(0, np.pi/2, 100) # Projection angles in radians Range calculation ranges = (v**2 * np.sin(2 * angles)) / g Plotting plt.figure(figsize=(10, 6)) plt.plot(np.degrees(angles), ranges) plt.title('Projectile Range vs Angle of Projection') plt.xlabel('Angle (degrees)') plt.ylabel('Range (m)') plt.grid() plt.show() This script can be expanded to incorporate more complex parameters and real-world considerations. Would you like help implementing this simulation or deriving the equations in more detail? This is a fascinating topic, and I'd love to explore it further with you.","title":"Implementation"},{"location":"Physics/1%20Mechanics/4.Implementation/#implementation","text":"Write a simulation program (e.g., in Python or MATLAB) using numerical methods to solve projectile motion equations. Generate plots for the range as a function of projection angle under varying initial conditions (e.g., \ud835\udc63, \ud835\udc54, launch height). Example visualization: polar or Cartesian plots highlighting key relationships. Visualization Sample Code (Python): python import numpy as np import matplotlib.pyplot as plt","title":"Implementation"},{"location":"Physics/1%20Mechanics/4.Implementation/#parameters","text":"g = 9.8 # Gravity (m/s^2) v = 20 # Initial velocity (m/s) angles = np.linspace(0, np.pi/2, 100) # Projection angles in radians","title":"Parameters"},{"location":"Physics/1%20Mechanics/4.Implementation/#range-calculation","text":"ranges = (v**2 * np.sin(2 * angles)) / g","title":"Range calculation"},{"location":"Physics/1%20Mechanics/4.Implementation/#plotting","text":"plt.figure(figsize=(10, 6)) plt.plot(np.degrees(angles), ranges) plt.title('Projectile Range vs Angle of Projection') plt.xlabel('Angle (degrees)') plt.ylabel('Range (m)') plt.grid() plt.show() This script can be expanded to incorporate more complex parameters and real-world considerations. Would you like help implementing this simulation or deriving the equations in more detail? This is a fascinating topic, and I'd love to explore it further with you.","title":"Plotting"},{"location":"Physics/1%20Mechanics/5.InferencesNHypothesis%27/","text":"Inferences and Hypotheses","title":"Inferences and Hypotheses"},{"location":"Physics/1%20Mechanics/5.InferencesNHypothesis%27/#inferences-and-hypotheses","text":"","title":"Inferences and Hypotheses"},{"location":"Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"}]}