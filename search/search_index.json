{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This is the website for Meynard Gilhang's Physics activities. This is my first time to use GitHub and i'm still grasping for the new web technologies and I'm trying to adapt and learn more to better understand these scripting languages that are being presented as part of this solution. I am a B.S. Computer Science in the Philippines and I've been a programmer since. I am your typical IT specialist (jack-of-all trades) with the following background: * Multimedia developer (technology no longer available) * Help authoring specialists (InstallShield) * Web developer (Macromededia ColdFusion, Classic ASP and .Net (vba/c#)) * Data specialist (SQL Integration Services, and Reporting Services) * Business Intelligence Developer using Microsoft Power Plastform (Power Apps, Power Automate and Power BI) I am currently working as a Power Apps Developer processing remote tasks for a US client. Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) c GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"This is the website for Meynard Gilhang's Physics activities. This is my first time to use GitHub and i'm still grasping for the new web technologies and I'm trying to adapt and learn more to better understand these scripting languages that are being presented as part of this solution. I am a B.S. Computer Science in the Philippines and I've been a programmer since. I am your typical IT specialist (jack-of-all trades) with the following background: * Multimedia developer (technology no longer available) * Help authoring specialists (InstallShield) * Web developer (Macromededia ColdFusion, Classic ASP and .Net (vba/c#)) * Data specialist (SQL Integration Services, and Reporting Services) * Business Intelligence Developer using Microsoft Power Plastform (Power Apps, Power Automate and Power BI) I am currently working as a Power Apps Developer processing remote tasks for a US client.","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) c GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"Physics/1%20Mechanics/P1/1.AngleOfProjection/","text":"Angle of Projection The angle of projection in projectile motion is a critical parameter that affects the trajectory, range, time of flight, and maximum height of a projectile. The angle of projection, combined with initial velocity, gravitational acceleration, and launch height, determines the path followed by the projectile. Let's break down how these parameters interact and the different sets of solutions that can arise: 1. Initial Velocity (v\u2080): Definition: The speed at which the projectile is launched. Impact: Affects the range and maximum height. For a given angle, increasing the initial velocity increases both the range and the height of the projectile. Gravitational Acceleration (g): Definition: The acceleration due to gravity, typically (9.81 , \\text{m/s}^2) on Earth. Impact: Acts downward, affecting the time of flight and the shape of the trajectory. It pulls the projectile downward, creating a parabolic path. Launch Height (h): Definition: The height from which the projectile is launched relative to the landing point. Impact: Influences the time the projectile stays in the air and the range. A higher launch point allows for a longer flight time and potentially greater range, depending on the angle of projection.","title":"Angle of Projection"},{"location":"Physics/1%20Mechanics/P1/1.AngleOfProjection/#angle-of-projection","text":"The angle of projection in projectile motion is a critical parameter that affects the trajectory, range, time of flight, and maximum height of a projectile. The angle of projection, combined with initial velocity, gravitational acceleration, and launch height, determines the path followed by the projectile. Let's break down how these parameters interact and the different sets of solutions that can arise: 1. Initial Velocity (v\u2080): Definition: The speed at which the projectile is launched. Impact: Affects the range and maximum height. For a given angle, increasing the initial velocity increases both the range and the height of the projectile. Gravitational Acceleration (g): Definition: The acceleration due to gravity, typically (9.81 , \\text{m/s}^2) on Earth. Impact: Acts downward, affecting the time of flight and the shape of the trajectory. It pulls the projectile downward, creating a parabolic path. Launch Height (h): Definition: The height from which the projectile is launched relative to the landing point. Impact: Influences the time the projectile stays in the air and the range. A higher launch point allows for a longer flight time and potentially greater range, depending on the angle of projection.","title":"Angle of Projection"},{"location":"Physics/1%20Mechanics/P1/2.RangeAnalysis/","text":"Range Analysis Optimal Angle for Maximum Range: Theory: For a projectile launched on a flat surface (i.e., launch height = landing height), the optimal angle for maximum range is 45 degrees. This is because the horizontal and vertical components of the initial velocity are equal, maximizing the distance. With Launch Height: If the launch height is above the landing height, the angle for maximum range is slightly less than 45 degrees, as the projectile benefits from additional time in the air. Symmetric Trajectories: Description: When launched from and landing on the same height, the projectile's path is symmetric around the peak. Angles: Two angles will yield the same range: \u03b8 and (90\u00b0 - \u03b8). For example, angles of 30 degrees and 60 degrees will result in the same range, but different times of flight and maximum heights. Time of Flight: Dependency: Depends on the vertical component of the initial velocity and the height difference between launch and landing. Calculation: For non-zero launch height, the time of flight can be found using kinematic equations that incorporate both the initial vertical velocity component and the effect of gravity. Maximum Height: Calculation: Depends on the vertical component of the initial velocity and gravitational acceleration. For launch height (h), the maximum height (H) is given by: $\\[ H = h + \\frac{(v\u2080 \\sin \\theta)^2}{2g} ] Effect of Air Resistance: Real-World Consideration: Although not accounted for in basic projectile motion equations, air resistance can significantly affect the trajectory, reducing both range and height, and altering the optimal angle of projection.","title":"Range Analysis"},{"location":"Physics/1%20Mechanics/P1/2.RangeAnalysis/#range-analysis","text":"","title":"Range Analysis"},{"location":"Physics/1%20Mechanics/P1/2.RangeAnalysis/#optimal-angle-for-maximum-range","text":"Theory: For a projectile launched on a flat surface (i.e., launch height = landing height), the optimal angle for maximum range is 45 degrees. This is because the horizontal and vertical components of the initial velocity are equal, maximizing the distance. With Launch Height: If the launch height is above the landing height, the angle for maximum range is slightly less than 45 degrees, as the projectile benefits from additional time in the air.","title":"Optimal Angle for Maximum Range:"},{"location":"Physics/1%20Mechanics/P1/2.RangeAnalysis/#symmetric-trajectories","text":"Description: When launched from and landing on the same height, the projectile's path is symmetric around the peak. Angles: Two angles will yield the same range: \u03b8 and (90\u00b0 - \u03b8). For example, angles of 30 degrees and 60 degrees will result in the same range, but different times of flight and maximum heights.","title":"Symmetric Trajectories:"},{"location":"Physics/1%20Mechanics/P1/2.RangeAnalysis/#time-of-flight","text":"Dependency: Depends on the vertical component of the initial velocity and the height difference between launch and landing. Calculation: For non-zero launch height, the time of flight can be found using kinematic equations that incorporate both the initial vertical velocity component and the effect of gravity.","title":"Time of Flight:"},{"location":"Physics/1%20Mechanics/P1/2.RangeAnalysis/#maximum-height","text":"Calculation: Depends on the vertical component of the initial velocity and gravitational acceleration. For launch height (h), the maximum height (H) is given by: $\\[ H = h + \\frac{(v\u2080 \\sin \\theta)^2}{2g} ]","title":"Maximum Height:"},{"location":"Physics/1%20Mechanics/P1/2.RangeAnalysis/#effect-of-air-resistance","text":"Real-World Consideration: Although not accounted for in basic projectile motion equations, air resistance can significantly affect the trajectory, reducing both range and height, and altering the optimal angle of projection.","title":"Effect of Air Resistance:"},{"location":"Physics/1%20Mechanics/P1/3.PracticalApplications/","text":"Practical Applications Projectile motion on uneven terrain and in the presence of air resistance is common in many real-world scenarios. These factors add complexity to predicting and optimizing trajectories, requiring careful analysis and adjustments. Here are some practical applications: Military and Defense Artillery and Ballistics: Artillery shells and missiles are often launched over uneven terrain and must account for air resistance. Advanced calculations and computer simulations help predict trajectories to accurately hit targets, considering factors like wind, air density, and varying elevation. Mortars and Rockets: Similar to artillery, mortars and rockets must adjust their launch angles and velocities to account for uneven terrain and atmospheric conditions to achieve desired impact points. Sports Golf: Golfers must consider the uneven terrain of a golf course, including hills and valleys, as well as wind conditions when choosing clubs and angles to optimize their shots. Ski Jumping: Ski jumpers launch from a slope and must navigate the air while accounting for wind resistance to achieve maximum distance and optimal landing on a descending slope. Engineering and Construction Demolition Using Explosives: Controlled demolitions often require precise calculations of projectile debris to ensure safety and effectiveness, considering the complex terrain of the demolition site. Bridge and Building Design: When constructing bridges or buildings, engineers use projectile motion principles to simulate potential debris trajectories from construction activities, ensuring safety on uneven terrain. Space Exploration Lunar and Planetary Landers: Landers must be designed to account for uneven terrain on celestial bodies and thin atmospheres when planning descent trajectories for safe landings. Mars Rovers: When launching projectiles or deploying components from rovers, engineers must consider Mars' uneven terrain and thin atmosphere to ensure successful operations. Entertainment and Media Stunt Coordination: In movies and shows, stunts involving projectile motion (e.g., jumping cars or bikes) need careful planning to account for uneven surfaces and air resistance to ensure the safety of performers. Fireworks Displays: Pyrotechnicians consider wind and varying terrain to design fireworks shows that achieve desired visual effects while ensuring safety and precision. Aerospace and Aviation Aircraft Bombing: When planes drop bombs or other projectiles, pilots and systems must account for the speed of the aircraft, altitude, air resistance, and terrain below to accurately hit targets. Drone Deliveries: Drones navigating uneven urban environments must account for wind currents and obstacles when delivering packages to specific locations.","title":"Practical Applications"},{"location":"Physics/1%20Mechanics/P1/3.PracticalApplications/#practical-applications","text":"Projectile motion on uneven terrain and in the presence of air resistance is common in many real-world scenarios. These factors add complexity to predicting and optimizing trajectories, requiring careful analysis and adjustments. Here are some practical applications:","title":"Practical Applications"},{"location":"Physics/1%20Mechanics/P1/3.PracticalApplications/#military-and-defense","text":"Artillery and Ballistics: Artillery shells and missiles are often launched over uneven terrain and must account for air resistance. Advanced calculations and computer simulations help predict trajectories to accurately hit targets, considering factors like wind, air density, and varying elevation. Mortars and Rockets: Similar to artillery, mortars and rockets must adjust their launch angles and velocities to account for uneven terrain and atmospheric conditions to achieve desired impact points.","title":"Military and Defense"},{"location":"Physics/1%20Mechanics/P1/3.PracticalApplications/#sports","text":"Golf: Golfers must consider the uneven terrain of a golf course, including hills and valleys, as well as wind conditions when choosing clubs and angles to optimize their shots. Ski Jumping: Ski jumpers launch from a slope and must navigate the air while accounting for wind resistance to achieve maximum distance and optimal landing on a descending slope.","title":"Sports"},{"location":"Physics/1%20Mechanics/P1/3.PracticalApplications/#engineering-and-construction","text":"Demolition Using Explosives: Controlled demolitions often require precise calculations of projectile debris to ensure safety and effectiveness, considering the complex terrain of the demolition site. Bridge and Building Design: When constructing bridges or buildings, engineers use projectile motion principles to simulate potential debris trajectories from construction activities, ensuring safety on uneven terrain.","title":"Engineering and Construction"},{"location":"Physics/1%20Mechanics/P1/3.PracticalApplications/#space-exploration","text":"Lunar and Planetary Landers: Landers must be designed to account for uneven terrain on celestial bodies and thin atmospheres when planning descent trajectories for safe landings. Mars Rovers: When launching projectiles or deploying components from rovers, engineers must consider Mars' uneven terrain and thin atmosphere to ensure successful operations.","title":"Space Exploration"},{"location":"Physics/1%20Mechanics/P1/3.PracticalApplications/#entertainment-and-media","text":"Stunt Coordination: In movies and shows, stunts involving projectile motion (e.g., jumping cars or bikes) need careful planning to account for uneven surfaces and air resistance to ensure the safety of performers. Fireworks Displays: Pyrotechnicians consider wind and varying terrain to design fireworks shows that achieve desired visual effects while ensuring safety and precision.","title":"Entertainment and Media"},{"location":"Physics/1%20Mechanics/P1/3.PracticalApplications/#aerospace-and-aviation","text":"Aircraft Bombing: When planes drop bombs or other projectiles, pilots and systems must account for the speed of the aircraft, altitude, air resistance, and terrain below to accurately hit targets. Drone Deliveries: Drones navigating uneven urban environments must account for wind currents and obstacles when delivering packages to specific locations.","title":"Aerospace and Aviation"},{"location":"Physics/1%20Mechanics/P1/4.Implementation/","text":"Implementation Run simulations on Projectile Motion When a projectile is launched with an initial velocity ( v_0 ) at an angle ( \\theta ) from the horizontal, its motion can be described using the following equations: Horizontal Range: ( R = \\frac{v_0^2 \\sin(2\\theta)}{g} ) Maximum Height: ( H = \\frac{v_0^2 \\sin^2(\\theta)}{2g} ) Time of Flight: ( T = \\frac{2v_0 \\sin(\\theta)}{g} ) Here, ( g ) is the acceleration due to gravity (approximately ( 9.81 , \\text{m/s}^2 ) on Earth). Range and Angle of Projection: The range ( R ) is maximized when the angle of projection ( \\theta ) is ( 45^\\circ ), assuming no air resistance. This is because the function ( \\sin(2\\theta) ) is maximized at ( 2\\theta = 90^\\circ ).","title":"Implementation"},{"location":"Physics/1%20Mechanics/P1/4.Implementation/#implementation","text":"Run simulations on Projectile Motion When a projectile is launched with an initial velocity ( v_0 ) at an angle ( \\theta ) from the horizontal, its motion can be described using the following equations: Horizontal Range: ( R = \\frac{v_0^2 \\sin(2\\theta)}{g} ) Maximum Height: ( H = \\frac{v_0^2 \\sin^2(\\theta)}{2g} ) Time of Flight: ( T = \\frac{2v_0 \\sin(\\theta)}{g} ) Here, ( g ) is the acceleration due to gravity (approximately ( 9.81 , \\text{m/s}^2 ) on Earth). Range and Angle of Projection: The range ( R ) is maximized when the angle of projection ( \\theta ) is ( 45^\\circ ), assuming no air resistance. This is because the function ( \\sin(2\\theta) ) is maximized at ( 2\\theta = 90^\\circ ).","title":"Implementation"},{"location":"Physics/1%20Mechanics/P1/5.SourceCode/","text":"Source code function calculateRange(velocity, angle, gravity, height) { const angleRad = (Math.PI / 180) * angle; const vX = velocity * Math.cos(angleRad); const vY = velocity * Math.sin(angleRad); // Time to reach the highest point const tUp = vY / gravity; const tDown = Math.sqrt((vY ** 2 + 2 * gravity * height) / gravity ** 2); const totalTime = tUp + tDown; // Calculate range return vX * totalTime; } function plotProjectile() { const velocity = parseFloat(document.getElementById('velocity').value); const angle = parseFloat(document.getElementById('angle').value); const gravity = parseFloat(document.getElementById('gravity').value); const height = parseFloat(document.getElementById('height').value); const ranges = []; const angles = []; for (let a = 0; a <= 90; a += 1) { angles.push(a); ranges.push(calculateRange(velocity, a, gravity, height)); } const trace = { x: angles, y: ranges, type: 'scatter', mode: 'lines+markers', name: 'Range vs Angle' }; const layout = { title: 'Projectile Motion', xaxis: { title: 'Angle of Projection (degrees)' }, yaxis: { title: 'Range (meters)' } }; Plotly.newPlot('plot', [trace], layout); }","title":"Source code"},{"location":"Physics/1%20Mechanics/P1/5.SourceCode/#source-code","text":"function calculateRange(velocity, angle, gravity, height) { const angleRad = (Math.PI / 180) * angle; const vX = velocity * Math.cos(angleRad); const vY = velocity * Math.sin(angleRad); // Time to reach the highest point const tUp = vY / gravity; const tDown = Math.sqrt((vY ** 2 + 2 * gravity * height) / gravity ** 2); const totalTime = tUp + tDown; // Calculate range return vX * totalTime; } function plotProjectile() { const velocity = parseFloat(document.getElementById('velocity').value); const angle = parseFloat(document.getElementById('angle').value); const gravity = parseFloat(document.getElementById('gravity').value); const height = parseFloat(document.getElementById('height').value); const ranges = []; const angles = []; for (let a = 0; a <= 90; a += 1) { angles.push(a); ranges.push(calculateRange(velocity, a, gravity, height)); } const trace = { x: angles, y: ranges, type: 'scatter', mode: 'lines+markers', name: 'Range vs Angle' }; const layout = { title: 'Projectile Motion', xaxis: { title: 'Angle of Projection (degrees)' }, yaxis: { title: 'Range (meters)' } }; Plotly.newPlot('plot', [trace], layout); }","title":"Source code"},{"location":"Physics/1%20Mechanics/P2/1.TheoreticalFoundation/","text":"Theoretical Foundations The motion of a forced damped pendulum can be described by the differential equation: [ \\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = \\frac{F_0}{mL} \\cos(\\omega t) ] where: (\\theta) is the angular displacement, (\\beta) is the damping coefficient, (\\omega_0^2 = \\frac{g}{L}) is the natural frequency of the pendulum, (F_0) is the amplitude of the driving force, (m) is the mass of the pendulum bob, (L) is the length of the pendulum, (\\omega) is the driving frequency, (t) is time. Small-Angle Approximation For small-angle oscillations, we can use the approximation (\\sin(\\theta) \\approx \\theta). This simplifies the equation to: [ \\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = \\frac{F_0}{mL} \\cos(\\omega t) ] This is a second-order linear non-homogeneous differential equation with constant coefficients. Solution of the Homogeneous Equation The homogeneous part of the equation is: [ \\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = 0 ] The characteristic equation is: [ r^2 + 2\\beta r + \\omega_0^2 = 0 ] Solving for (r), we find: [ r = -\\beta \\pm \\sqrt{\\beta^2 - \\omega_0^2} ] Depending on the discriminant (\\beta^2 - \\omega_0^2), the system can be: Overdamped ((\\beta^2 > \\omega_0^2)): Two distinct real roots leading to an exponential decay without oscillations. Critically damped ((\\beta^2 = \\omega_0^2)): A repeated real root leading to the fastest decay without oscillations. Underdamped ((\\beta^2 < \\omega_0^2)): Complex roots leading to oscillatory decay: [ r = -\\beta \\pm i\\sqrt{\\omega_0^2 - \\beta^2} ] The solution is: [ \\theta_h(t) = e^{-\\beta t}(A \\cos(\\omega_d t) + B \\sin(\\omega_d t)) ] where (\\omega_d = \\sqrt{\\omega_0^2 - \\beta^2}) is the damped natural frequency. Particular Solution for the Forced System To find a particular solution (\\theta_p(t)), we assume a solution of the form: [ \\theta_p(t) = C \\cos(\\omega t) + D \\sin(\\omega t) ] Substituting into the non-homogeneous equation and solving for constants (C) and (D), we obtain: [ C = \\frac{F_0/mL}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (2\\beta \\omega)^2}} ] [ D = -\\frac{2\\beta \\omega C}{\\omega_0^2 - \\omega^2} ] The general solution is: [ \\theta(t) = \\theta_h(t) + \\theta_p(t) ] Resonance Conditions Resonance occurs when the driving frequency (\\omega) is close to the natural frequency of the system (\\omega_0). At resonance ((\\omega \\approx \\omega_0)), the amplitude of oscillations becomes significantly large because the system absorbs energy most efficiently from the driving force. The implications for the system's energy are profound: Increased Amplitude: The displacement amplitude increases, which means more energy is stored in the system as potential and kinetic energy. Energy Transfer: The system can absorb more energy from the driving force, leading to increased oscillations. Potential for Damage: In practical systems, excessive amplitudes due to resonance can lead to mechanical failure or structural damage.","title":"Theoretical Foundations"},{"location":"Physics/1%20Mechanics/P2/1.TheoreticalFoundation/#theoretical-foundations","text":"The motion of a forced damped pendulum can be described by the differential equation: [ \\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = \\frac{F_0}{mL} \\cos(\\omega t) ] where: (\\theta) is the angular displacement, (\\beta) is the damping coefficient, (\\omega_0^2 = \\frac{g}{L}) is the natural frequency of the pendulum, (F_0) is the amplitude of the driving force, (m) is the mass of the pendulum bob, (L) is the length of the pendulum, (\\omega) is the driving frequency, (t) is time. Small-Angle Approximation For small-angle oscillations, we can use the approximation (\\sin(\\theta) \\approx \\theta). This simplifies the equation to: [ \\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = \\frac{F_0}{mL} \\cos(\\omega t) ] This is a second-order linear non-homogeneous differential equation with constant coefficients. Solution of the Homogeneous Equation The homogeneous part of the equation is: [ \\frac{d^2\\theta}{dt^2} + 2\\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = 0 ] The characteristic equation is: [ r^2 + 2\\beta r + \\omega_0^2 = 0 ] Solving for (r), we find: [ r = -\\beta \\pm \\sqrt{\\beta^2 - \\omega_0^2} ] Depending on the discriminant (\\beta^2 - \\omega_0^2), the system can be: Overdamped ((\\beta^2 > \\omega_0^2)): Two distinct real roots leading to an exponential decay without oscillations. Critically damped ((\\beta^2 = \\omega_0^2)): A repeated real root leading to the fastest decay without oscillations. Underdamped ((\\beta^2 < \\omega_0^2)): Complex roots leading to oscillatory decay: [ r = -\\beta \\pm i\\sqrt{\\omega_0^2 - \\beta^2} ] The solution is: [ \\theta_h(t) = e^{-\\beta t}(A \\cos(\\omega_d t) + B \\sin(\\omega_d t)) ] where (\\omega_d = \\sqrt{\\omega_0^2 - \\beta^2}) is the damped natural frequency. Particular Solution for the Forced System To find a particular solution (\\theta_p(t)), we assume a solution of the form: [ \\theta_p(t) = C \\cos(\\omega t) + D \\sin(\\omega t) ] Substituting into the non-homogeneous equation and solving for constants (C) and (D), we obtain: [ C = \\frac{F_0/mL}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (2\\beta \\omega)^2}} ] [ D = -\\frac{2\\beta \\omega C}{\\omega_0^2 - \\omega^2} ] The general solution is: [ \\theta(t) = \\theta_h(t) + \\theta_p(t) ] Resonance Conditions Resonance occurs when the driving frequency (\\omega) is close to the natural frequency of the system (\\omega_0). At resonance ((\\omega \\approx \\omega_0)), the amplitude of oscillations becomes significantly large because the system absorbs energy most efficiently from the driving force. The implications for the system's energy are profound: Increased Amplitude: The displacement amplitude increases, which means more energy is stored in the system as potential and kinetic energy. Energy Transfer: The system can absorb more energy from the driving force, leading to increased oscillations. Potential for Damage: In practical systems, excessive amplitudes due to resonance can lead to mechanical failure or structural damage.","title":"Theoretical Foundations"},{"location":"Physics/1%20Mechanics/P2/2.AnalysisOfDynamics/","text":"Dynamics of Forced Pendulum The behavior of a forced damped pendulum is influenced by several parameters: the damping coefficient, the driving amplitude, and the driving frequency. Each of these parameters affects the pendulum's motion in distinct ways. Influence of Parameters Damping Coefficient \u03b2 - Energy Dissipation: The damping coefficient represents the rate at which energy is lost from the system, typically due to friction or air resistance. - Amplitude Reduction: Higher damping results in quicker decay of oscillations and reduces the steady-state amplitude of oscillations. - Transition to Steady State: Stronger damping hastens the transition to the steady-state response and can prevent large oscillations at or near resonance. Driving Amplitude F 0 Energy Input: A higher driving amplitude means more energy is input into the system. Amplitude of Response: The amplitude of the pendulum's oscillations in its steady state is directly proportional to the driving amplitude. Potential for Chaos: Large driving amplitudes can lead to complex, chaotic motion as they provide enough energy to overcome damping and allow the system to explore a wider range of phase space. Driving Frequency \u03a9 Resonance: When the driving frequency is close to the natural frequency of the system, resonance can occur, leading to large amplitude oscillations. Frequency Response: The system's response amplitude and phase change significantly with different driving frequencies, especially near resonance. Transition to Chaos: Certain frequencies, particularly those far from the natural frequency or in combination with other parameters, can lead to bifurcations and chaotic behavior. Transition Between Regular and Chaotic Motion The transition between regular (periodic) and chaotic motion in a forced damped pendulum is a hallmark of nonlinear systems. It can be influenced by changes in the damping coefficient, driving amplitude, and driving frequency. Regular Motion Characterized by predictable, periodic oscillations. Occurs when the system parameters are such that the pendulum follows a stable, repeating path in its phase space. Typically observed at low driving amplitudes and frequencies away from resonance. Chaotic Motion Characterized by aperiodic, unpredictable behavior that is highly sensitive to initial conditions. Occurs when the system parameters cause the pendulum to explore a larger, more complex region of phase space. Can be triggered by increasing the driving amplitude or frequency, especially when combined with low damping. Physical Interpretation Phase Space: In regular motion, the trajectory in phase space is a closed loop, indicating periodic behavior. In chaotic motion, the trajectory fills a region of phase space, reflecting the system's sensitivity to initial conditions and lack of periodicity. Bifurcations: As parameters change, the system may undergo bifurcations, where a small change in parameters results in a qualitative change in motion (e.g., from periodic to chaotic). Energy Exchange: In chaotic regimes, energy exchange between potential and kinetic forms becomes irregular, leading to erratic motion. Real-World Implications: Understanding these transitions is crucial in engineering and physics, as it helps in designing systems that avoid chaotic behavior when stability is desired, or exploit it when randomness is beneficial (e.g., in mixing processes).","title":"Dynamics of Forced Pendulum"},{"location":"Physics/1%20Mechanics/P2/2.AnalysisOfDynamics/#dynamics-of-forced-pendulum","text":"The behavior of a forced damped pendulum is influenced by several parameters: the damping coefficient, the driving amplitude, and the driving frequency. Each of these parameters affects the pendulum's motion in distinct ways.","title":"Dynamics of Forced Pendulum"},{"location":"Physics/1%20Mechanics/P2/2.AnalysisOfDynamics/#influence-of-parameters","text":"","title":"Influence of Parameters"},{"location":"Physics/1%20Mechanics/P2/2.AnalysisOfDynamics/#damping-coefficient","text":"- Energy Dissipation: The damping coefficient represents the rate at which energy is lost from the system, typically due to friction or air resistance. - Amplitude Reduction: Higher damping results in quicker decay of oscillations and reduces the steady-state amplitude of oscillations. - Transition to Steady State: Stronger damping hastens the transition to the steady-state response and can prevent large oscillations at or near resonance.","title":"Damping Coefficient \u03b2"},{"location":"Physics/1%20Mechanics/P2/2.AnalysisOfDynamics/#driving-amplitude-f0","text":"Energy Input: A higher driving amplitude means more energy is input into the system. Amplitude of Response: The amplitude of the pendulum's oscillations in its steady state is directly proportional to the driving amplitude. Potential for Chaos: Large driving amplitudes can lead to complex, chaotic motion as they provide enough energy to overcome damping and allow the system to explore a wider range of phase space.","title":"Driving Amplitude F0"},{"location":"Physics/1%20Mechanics/P2/2.AnalysisOfDynamics/#driving-frequency","text":"Resonance: When the driving frequency is close to the natural frequency of the system, resonance can occur, leading to large amplitude oscillations. Frequency Response: The system's response amplitude and phase change significantly with different driving frequencies, especially near resonance. Transition to Chaos: Certain frequencies, particularly those far from the natural frequency or in combination with other parameters, can lead to bifurcations and chaotic behavior.","title":"Driving Frequency \u03a9"},{"location":"Physics/1%20Mechanics/P2/2.AnalysisOfDynamics/#transition-between-regular-and-chaotic-motion","text":"The transition between regular (periodic) and chaotic motion in a forced damped pendulum is a hallmark of nonlinear systems. It can be influenced by changes in the damping coefficient, driving amplitude, and driving frequency.","title":"Transition Between Regular and Chaotic Motion"},{"location":"Physics/1%20Mechanics/P2/2.AnalysisOfDynamics/#regular-motion","text":"Characterized by predictable, periodic oscillations. Occurs when the system parameters are such that the pendulum follows a stable, repeating path in its phase space. Typically observed at low driving amplitudes and frequencies away from resonance.","title":"Regular Motion"},{"location":"Physics/1%20Mechanics/P2/2.AnalysisOfDynamics/#chaotic-motion","text":"Characterized by aperiodic, unpredictable behavior that is highly sensitive to initial conditions. Occurs when the system parameters cause the pendulum to explore a larger, more complex region of phase space. Can be triggered by increasing the driving amplitude or frequency, especially when combined with low damping.","title":"Chaotic Motion"},{"location":"Physics/1%20Mechanics/P2/2.AnalysisOfDynamics/#physical-interpretation","text":"Phase Space: In regular motion, the trajectory in phase space is a closed loop, indicating periodic behavior. In chaotic motion, the trajectory fills a region of phase space, reflecting the system's sensitivity to initial conditions and lack of periodicity. Bifurcations: As parameters change, the system may undergo bifurcations, where a small change in parameters results in a qualitative change in motion (e.g., from periodic to chaotic). Energy Exchange: In chaotic regimes, energy exchange between potential and kinetic forms becomes irregular, leading to erratic motion. Real-World Implications: Understanding these transitions is crucial in engineering and physics, as it helps in designing systems that avoid chaotic behavior when stability is desired, or exploit it when randomness is beneficial (e.g., in mixing processes).","title":"Physical Interpretation"},{"location":"Physics/1%20Mechanics/P2/3.Scenarios/","text":"Real world scenarios Suspension Bridges Application: The dynamics of suspension bridges can be modeled as forced damped systems. Wind, traffic, and seismic activities act as external forces, while the structure's inherent damping properties help dissipate energy. Example: The Tacoma Narrows Bridge disaster is a classic case where insufficient damping and wind-induced resonance led to catastrophic oscillations. ### Seismic Isolation Systems Application: Buildings and structures are often equipped with seismic isolation systems to reduce the impact of earthquakes. These systems can be modeled as forced damped pendulums, where seismic forces are the driving force. Explanation: The damping elements in these systems absorb and dissipate seismic energy, minimizing displacement and damage. ### Energy Harvesting Devices Application: Devices that convert mechanical vibrations into electrical energy often rely on the principles of forced damped oscillations. Explanation: These systems use mechanical oscillators (like pendulums) to capture ambient vibrations and convert them into usable energy, with damping mechanisms optimizing energy extraction and stability. ### Oscillating Circuits Application: Electrical circuits with inductors, capacitors, and resistors can be analogous to mechanical forced damped oscillators. Explanation: The driving force is the input voltage, damping comes from resistive elements, and the circuit's natural frequency is determined by inductive and capacitive components. ### Mechanical Clocks Application: The escapement mechanism in mechanical clocks functions similarly to a forced damped pendulum. Explanation: The driving force is provided by a wound spring or weight, while damping ensures the pendulum's motion remains regular and precise for accurate timekeeping. ### Vehicle Suspension Systems Application: Car suspension systems are designed to absorb shocks and provide a smooth ride, modeled as forced damped oscillators. Explanation: The road surface provides the driving force, while shock absorbers (dampers) control oscillations to prevent excessive bouncing. ### Marine and Offshore Structures Application: Structures exposed to ocean waves, such as oil platforms, can be analyzed using the forced damped pendulum model. Explanation: Waves act as periodic driving forces, and the structure's damping characteristics determine its response to these forces. ### Control Systems in Engineering Application: Feedback control systems often use forced damped oscillators to stabilize and control dynamic systems. Explanation: Controllers adjust the damping and driving parameters to maintain desired system behavior.","title":"Real world scenarios"},{"location":"Physics/1%20Mechanics/P2/3.Scenarios/#real-world-scenarios","text":"","title":"Real world scenarios"},{"location":"Physics/1%20Mechanics/P2/3.Scenarios/#suspension-bridges","text":"Application: The dynamics of suspension bridges can be modeled as forced damped systems. Wind, traffic, and seismic activities act as external forces, while the structure's inherent damping properties help dissipate energy. Example: The Tacoma Narrows Bridge disaster is a classic case where insufficient damping and wind-induced resonance led to catastrophic oscillations. ### Seismic Isolation Systems Application: Buildings and structures are often equipped with seismic isolation systems to reduce the impact of earthquakes. These systems can be modeled as forced damped pendulums, where seismic forces are the driving force. Explanation: The damping elements in these systems absorb and dissipate seismic energy, minimizing displacement and damage. ### Energy Harvesting Devices Application: Devices that convert mechanical vibrations into electrical energy often rely on the principles of forced damped oscillations. Explanation: These systems use mechanical oscillators (like pendulums) to capture ambient vibrations and convert them into usable energy, with damping mechanisms optimizing energy extraction and stability. ### Oscillating Circuits Application: Electrical circuits with inductors, capacitors, and resistors can be analogous to mechanical forced damped oscillators. Explanation: The driving force is the input voltage, damping comes from resistive elements, and the circuit's natural frequency is determined by inductive and capacitive components. ### Mechanical Clocks Application: The escapement mechanism in mechanical clocks functions similarly to a forced damped pendulum. Explanation: The driving force is provided by a wound spring or weight, while damping ensures the pendulum's motion remains regular and precise for accurate timekeeping. ### Vehicle Suspension Systems Application: Car suspension systems are designed to absorb shocks and provide a smooth ride, modeled as forced damped oscillators. Explanation: The road surface provides the driving force, while shock absorbers (dampers) control oscillations to prevent excessive bouncing. ### Marine and Offshore Structures Application: Structures exposed to ocean waves, such as oil platforms, can be analyzed using the forced damped pendulum model. Explanation: Waves act as periodic driving forces, and the structure's damping characteristics determine its response to these forces. ### Control Systems in Engineering Application: Feedback control systems often use forced damped oscillators to stabilize and control dynamic systems. Explanation: Controllers adjust the damping and driving parameters to maintain desired system behavior.","title":"Suspension Bridges"},{"location":"Physics/1%20Mechanics/P2/4.Implementation/","text":"Implementation Simulate the motion of a forced damped pendulum using 3 variables Parameters: - damping coefficient \u0392 - driving amplitude F 0 - driving frequency \u03a9 Simulate the motion of a forced damped pendulum using 7 variables Parameters: - gravitational constant g - pendulum length L - damping coefficient \u0392 - driving force amplitude F 0 - driving frequency \u03a9Drive - time step dt - total simulation time","title":"Implementation"},{"location":"Physics/1%20Mechanics/P2/4.Implementation/#implementation","text":"Simulate the motion of a forced damped pendulum using 3 variables Parameters: - damping coefficient \u0392 - driving amplitude F 0 - driving frequency \u03a9 Simulate the motion of a forced damped pendulum using 7 variables Parameters: - gravitational constant g - pendulum length L - damping coefficient \u0392 - driving force amplitude F 0 - driving frequency \u03a9Drive - time step dt - total simulation time","title":"Implementation"},{"location":"Physics/1%20Mechanics/P2/5.SourceCode/","text":"Source code 3 Parameter ipt Copy codefunction simulate() { // Retrieve parameters from sliders const beta = parseFloat(document.getElementById('beta').value); const F0 = parseFloat(document.getElementById('F0').value); const omegaDrive = parseFloat(document.getElementById('omega').value); // Update display of parameter values document.getElementById('betaValue').innerText = beta.toFixed(2); document.getElementById('F0Value').innerText = F0.toFixed(1); document.getElementById('omegaValue').innerText = omegaDrive.toFixed(1); // Constants const g = 9.81; // gravity const L = 1.0; // length of pendulum // Time parameters const dt = 0.01; // time step const totalTime = 100; // total simulation time const poincareInterval = Math.PI * 2 / omegaDrive; // interval for Poincar\u00e9 section // Initialize variables let theta = 0.1; // initial angle let omega = 0.0; // initial angular velocity let time = 0.0; // Data arrays for phase diagram and Poincar\u00e9 section let phaseData = []; let poincareData = []; // Simulation loop while (time < totalTime) { // Calculate angular acceleration const alpha = -(g / L) * Math.sin(theta) - beta * omega + (F0 / L) * Math.cos(omegaDrive * time); // Update angular velocity and angle omega += alpha * dt; theta += omega * dt; // Record phase data phaseData.push({ x: theta, y: omega }); // Record Poincar\u00e9 section data at driving period intervals if (Math.abs((time % poincareInterval) - poincareInterval) < dt) { poincareData.push({ x: theta, y: omega }); } // Increment time time += dt; } // Plot phase diagram using Plotly Plotly.newPlot('phaseDiagram', [{ x: phaseData.map(point => point.x), y: phaseData.map(point => point.y), mode: 'lines', name: 'Phase Diagram' }], { title: 'Phase Diagram', xaxis: { title: 'Theta (rad)' }, yaxis: { title: 'Omega (rad/s)' } }); // Plot Poincar\u00e9 section using Plotly Plotly.newPlot('poincareSection', [{ x: poincareData.map(point => point.x), y: poincareData.map(point => point.y), mode: 'markers', name: 'Poincar\u00e9 Section' }], { title: 'Poincar\u00e9 Section', xaxis: { title: 'Theta (rad)' }, yaxis: { title: 'Omega (rad/s)' } }); } // Initial simulation on page load simulate(); 7 Parameter function simulate() { // Retrieve parameters from inputs const g = parseFloat(document.getElementById('g').value); const L = parseFloat(document.getElementById('L').value); const beta = parseFloat(document.getElementById('beta').value); const F0 = parseFloat(document.getElementById('F0').value); const omegaDrive = parseFloat(document.getElementById('omegaDrive').value); const dt = parseFloat(document.getElementById('dt').value); const totalTime = parseFloat(document.getElementById('totalTime').value); // Initialize variables let theta = 0.1; // initial angle let omega = 0.0; // initial angular velocity let time = 0.0; // Data arrays for phase diagram and Poincar\u00e9 section let phaseData = []; let poincareData = []; // Simulation loop while (time < totalTime) { // Calculate angular acceleration const alpha = -(g / L) * Math.sin(theta) - beta * omega + (F0 / L) * Math.cos(omegaDrive * time); // Update angular velocity and angle omega += alpha * dt; theta += omega * dt; // Record phase data phaseData.push({ x: theta, y: omega }); // Record Poincar\u00e9 section data at driving period intervals const poincareInterval = Math.PI * 2 / omegaDrive; if (Math.abs((time % poincareInterval) - poincareInterval) < dt) { poincareData.push({ x: theta, y: omega }); } // Increment time time += dt; } // Plot phase diagram using Plotly Plotly.newPlot('phaseDiagram', [{ x: phaseData.map(point => point.x), y: phaseData.map(point => point.y), mode: 'lines', name: 'Phase Diagram' }], { title: 'Phase Diagram', xaxis: { title: 'Theta (rad)' }, yaxis: { title: 'Omega (rad/s)' } }); // Plot Poincar\u00e9 section using Plotly Plotly.newPlot('poincareSection', [{ x: poincareData.map(point => point.x), y: poincareData.map(point => point.y), mode: 'markers', name: 'Poincar\u00e9 Section' }], { title: 'Poincar\u00e9 Section', xaxis: { title: 'Theta (rad)' }, yaxis: { title: 'Omega (rad/s)' } }); } // Initial simulation on page load simulate();","title":"Source code"},{"location":"Physics/1%20Mechanics/P2/5.SourceCode/#source-code","text":"3 Parameter ipt Copy codefunction simulate() { // Retrieve parameters from sliders const beta = parseFloat(document.getElementById('beta').value); const F0 = parseFloat(document.getElementById('F0').value); const omegaDrive = parseFloat(document.getElementById('omega').value); // Update display of parameter values document.getElementById('betaValue').innerText = beta.toFixed(2); document.getElementById('F0Value').innerText = F0.toFixed(1); document.getElementById('omegaValue').innerText = omegaDrive.toFixed(1); // Constants const g = 9.81; // gravity const L = 1.0; // length of pendulum // Time parameters const dt = 0.01; // time step const totalTime = 100; // total simulation time const poincareInterval = Math.PI * 2 / omegaDrive; // interval for Poincar\u00e9 section // Initialize variables let theta = 0.1; // initial angle let omega = 0.0; // initial angular velocity let time = 0.0; // Data arrays for phase diagram and Poincar\u00e9 section let phaseData = []; let poincareData = []; // Simulation loop while (time < totalTime) { // Calculate angular acceleration const alpha = -(g / L) * Math.sin(theta) - beta * omega + (F0 / L) * Math.cos(omegaDrive * time); // Update angular velocity and angle omega += alpha * dt; theta += omega * dt; // Record phase data phaseData.push({ x: theta, y: omega }); // Record Poincar\u00e9 section data at driving period intervals if (Math.abs((time % poincareInterval) - poincareInterval) < dt) { poincareData.push({ x: theta, y: omega }); } // Increment time time += dt; } // Plot phase diagram using Plotly Plotly.newPlot('phaseDiagram', [{ x: phaseData.map(point => point.x), y: phaseData.map(point => point.y), mode: 'lines', name: 'Phase Diagram' }], { title: 'Phase Diagram', xaxis: { title: 'Theta (rad)' }, yaxis: { title: 'Omega (rad/s)' } }); // Plot Poincar\u00e9 section using Plotly Plotly.newPlot('poincareSection', [{ x: poincareData.map(point => point.x), y: poincareData.map(point => point.y), mode: 'markers', name: 'Poincar\u00e9 Section' }], { title: 'Poincar\u00e9 Section', xaxis: { title: 'Theta (rad)' }, yaxis: { title: 'Omega (rad/s)' } }); } // Initial simulation on page load simulate(); 7 Parameter function simulate() { // Retrieve parameters from inputs const g = parseFloat(document.getElementById('g').value); const L = parseFloat(document.getElementById('L').value); const beta = parseFloat(document.getElementById('beta').value); const F0 = parseFloat(document.getElementById('F0').value); const omegaDrive = parseFloat(document.getElementById('omegaDrive').value); const dt = parseFloat(document.getElementById('dt').value); const totalTime = parseFloat(document.getElementById('totalTime').value); // Initialize variables let theta = 0.1; // initial angle let omega = 0.0; // initial angular velocity let time = 0.0; // Data arrays for phase diagram and Poincar\u00e9 section let phaseData = []; let poincareData = []; // Simulation loop while (time < totalTime) { // Calculate angular acceleration const alpha = -(g / L) * Math.sin(theta) - beta * omega + (F0 / L) * Math.cos(omegaDrive * time); // Update angular velocity and angle omega += alpha * dt; theta += omega * dt; // Record phase data phaseData.push({ x: theta, y: omega }); // Record Poincar\u00e9 section data at driving period intervals const poincareInterval = Math.PI * 2 / omegaDrive; if (Math.abs((time % poincareInterval) - poincareInterval) < dt) { poincareData.push({ x: theta, y: omega }); } // Increment time time += dt; } // Plot phase diagram using Plotly Plotly.newPlot('phaseDiagram', [{ x: phaseData.map(point => point.x), y: phaseData.map(point => point.y), mode: 'lines', name: 'Phase Diagram' }], { title: 'Phase Diagram', xaxis: { title: 'Theta (rad)' }, yaxis: { title: 'Omega (rad/s)' } }); // Plot Poincar\u00e9 section using Plotly Plotly.newPlot('poincareSection', [{ x: poincareData.map(point => point.x), y: poincareData.map(point => point.y), mode: 'markers', name: 'Poincar\u00e9 Section' }], { title: 'Poincar\u00e9 Section', xaxis: { title: 'Theta (rad)' }, yaxis: { title: 'Omega (rad/s)' } }); } // Initial simulation on page load simulate();","title":"Source code"},{"location":"Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"}]}