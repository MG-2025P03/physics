{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This is the website for Meynard Gilhang's Physics activities. This is my first time to use GitHub and i'm still grasping trying to adapt and learn the new scripting languages that are being presented as part of this solution. I am a B.S. Computer Science in the Philippines and I've been a programmer since. I am your typical IT specialist (jack-of-all trades) with the following background: * Multimedia developer (technology no longer available) * Help authoring specialists (InstallShield) * Web developer (Macromededia ColdFusion, Classic ASP and .Net (vba/c#)) * Data specialist (SQL Integration Services, and Reporting Services) * Business Intelligence Developer using Microsoft Power Plastform (Power Apps, Power Automate and Power BI) I am currently working as a Power Apps Developer processing remote tasks for a US client. Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) c GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"This is the website for Meynard Gilhang's Physics activities. This is my first time to use GitHub and i'm still grasping trying to adapt and learn the new scripting languages that are being presented as part of this solution. I am a B.S. Computer Science in the Philippines and I've been a programmer since. I am your typical IT specialist (jack-of-all trades) with the following background: * Multimedia developer (technology no longer available) * Help authoring specialists (InstallShield) * Web developer (Macromededia ColdFusion, Classic ASP and .Net (vba/c#)) * Data specialist (SQL Integration Services, and Reporting Services) * Business Intelligence Developer using Microsoft Power Plastform (Power Apps, Power Automate and Power BI) I am currently working as a Power Apps Developer processing remote tasks for a US client.","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) c GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/","text":"Theoretical Foundation The governing equations of motion can be expressed as differential equations, such as \\( m \\frac{d^2x}{dt^2} = F(x, t) \\) for one dimension. Variations in initial conditions lead to different solutions representing various trajectories. The example of a simple harmonic oscillator is given by \\( x(t) = A \\cos(\\omega t + \\phi) \\) . Step 1: Introduction to Equations of Motion The equations of motion describe the behavior of a physical system in terms of its motion as a function of time. Derived from Newton's Second Law, \\( F = ma \\) , where \\( F \\) is the force applied, \\( m \\) is the mass, and \\( a \\) is the acceleration. Step 2: Fundamental Principles Newton's Laws of Motion : These laws form the basis for classical mechanics. First Law: An object remains at rest or in uniform motion unless acted upon by a force. Second Law: The acceleration of an object is directly proportional to the net force acting on it and inversely proportional to its mass. Third Law: For every action, there is an equal and opposite reaction. Step 3: Differential Equations of Motion The general form of the equations of motion can be expressed as differential equations: For a single particle in one dimension: \\( m \\frac{d^2x}{dt^2} = F(x, t) \\) In vector form for three dimensions: \\( \\mathbf{F} = m \\mathbf{a} = m \\frac{d^2\\mathbf{r}}{dt^2} \\) These equations can be solved given initial conditions to determine the trajectory of the particle. Step 4: Initial Conditions and Family of Solutions Initial conditions specify the state of the system at \\( t = 0 \\) , such as initial position \\( x_0 \\) and initial velocity \\( v_0 \\) . Variations in initial conditions lead to different solutions, representing different possible trajectories or motions of the system. Step 5: Example of a Simple Harmonic Oscillator Consider a mass-spring system where the force is given by Hooke's Law: \\( F = -kx \\) . The equation of motion becomes: \\( m \\frac{d^2x}{dt^2} = -kx \\) . Solving this differential equation gives: \\( x(t) = A \\cos(\\omega t + \\phi) \\) , where \\( \\omega = \\sqrt{\\frac{k}{m}} \\) . Step 6: Python Code for Visualization import numpy as np import matplotlib.pyplot as plt Parameters g = 9.8 # Gravity (m/s^2) v = 20 # Initial velocity (m/s) theta = np.radians(45) # Angle of projection (degrees) Time of flight and horizontal range t_flight = 2 * v * np.sin(theta) / g x_range = v**2 * np.sin(2 * theta) / g Time intervals and positions t = np.linspace(0, t_flight, num=500) x = v * np.cos(theta) * t y = v * np.sin(theta) * t - 0.5 * g * t**2 Plot plt.figure(figsize=(10, 6)) plt.plot(x, y, label=f'Theta = 45 degrees') plt.title('Projectile Motion: Trajectory') plt.xlabel('Horizontal Position (m)') plt.ylabel('Vertical Position (m)') plt.axhline(0, color='black', linewidth=0.8) # Ground level plt.legend() plt.grid() plt.show() Step 7: Conclusion The equations of motion are fundamental to understanding the dynamics of physical systems. By solving these equations with different initial conditions, we can explore a variety of possible motions. Visualization through programming can aid in comprehending these concepts.","title":"Theoretical Foundation"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/#theoretical-foundation","text":"The governing equations of motion can be expressed as differential equations, such as \\( m \\frac{d^2x}{dt^2} = F(x, t) \\) for one dimension. Variations in initial conditions lead to different solutions representing various trajectories. The example of a simple harmonic oscillator is given by \\( x(t) = A \\cos(\\omega t + \\phi) \\) .","title":"Theoretical Foundation"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/#step-1-introduction-to-equations-of-motion","text":"The equations of motion describe the behavior of a physical system in terms of its motion as a function of time. Derived from Newton's Second Law, \\( F = ma \\) , where \\( F \\) is the force applied, \\( m \\) is the mass, and \\( a \\) is the acceleration.","title":"Step 1: Introduction to Equations of Motion"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/#step-2-fundamental-principles","text":"Newton's Laws of Motion : These laws form the basis for classical mechanics. First Law: An object remains at rest or in uniform motion unless acted upon by a force. Second Law: The acceleration of an object is directly proportional to the net force acting on it and inversely proportional to its mass. Third Law: For every action, there is an equal and opposite reaction.","title":"Step 2: Fundamental Principles"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/#step-3-differential-equations-of-motion","text":"The general form of the equations of motion can be expressed as differential equations: For a single particle in one dimension: \\( m \\frac{d^2x}{dt^2} = F(x, t) \\) In vector form for three dimensions: \\( \\mathbf{F} = m \\mathbf{a} = m \\frac{d^2\\mathbf{r}}{dt^2} \\) These equations can be solved given initial conditions to determine the trajectory of the particle.","title":"Step 3: Differential Equations of Motion"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/#step-4-initial-conditions-and-family-of-solutions","text":"Initial conditions specify the state of the system at \\( t = 0 \\) , such as initial position \\( x_0 \\) and initial velocity \\( v_0 \\) . Variations in initial conditions lead to different solutions, representing different possible trajectories or motions of the system.","title":"Step 4: Initial Conditions and Family of Solutions"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/#step-5-example-of-a-simple-harmonic-oscillator","text":"Consider a mass-spring system where the force is given by Hooke's Law: \\( F = -kx \\) . The equation of motion becomes: \\( m \\frac{d^2x}{dt^2} = -kx \\) . Solving this differential equation gives: \\( x(t) = A \\cos(\\omega t + \\phi) \\) , where \\( \\omega = \\sqrt{\\frac{k}{m}} \\) .","title":"Step 5: Example of a Simple Harmonic Oscillator"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/#step-6-python-code-for-visualization","text":"import numpy as np import matplotlib.pyplot as plt","title":"Step 6: Python Code for Visualization"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/#parameters","text":"g = 9.8 # Gravity (m/s^2) v = 20 # Initial velocity (m/s) theta = np.radians(45) # Angle of projection (degrees)","title":"Parameters"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/#time-of-flight-and-horizontal-range","text":"t_flight = 2 * v * np.sin(theta) / g x_range = v**2 * np.sin(2 * theta) / g","title":"Time of flight and horizontal range"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/#time-intervals-and-positions","text":"t = np.linspace(0, t_flight, num=500) x = v * np.cos(theta) * t y = v * np.sin(theta) * t - 0.5 * g * t**2","title":"Time intervals and positions"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/#plot","text":"plt.figure(figsize=(10, 6)) plt.plot(x, y, label=f'Theta = 45 degrees') plt.title('Projectile Motion: Trajectory') plt.xlabel('Horizontal Position (m)') plt.ylabel('Vertical Position (m)') plt.axhline(0, color='black', linewidth=0.8) # Ground level plt.legend() plt.grid() plt.show()","title":"Plot"},{"location":"Physics/1%20Mechanics/1.TheoreticalFoundation/#step-7-conclusion","text":"The equations of motion are fundamental to understanding the dynamics of physical systems. By solving these equations with different initial conditions, we can explore a variety of possible motions. Visualization through programming can aid in comprehending these concepts.","title":"Step 7: Conclusion"},{"location":"Physics/1%20Mechanics/2.RangeAnalysis/","text":"Range Analysis Derive the range formula: \\( \\(R = \\frac{v^2 \\sin(2\\theta)}{g}\\) \\) . Analyze the dependence on \ud835\udf03: Identify the optimal angle (45\u2218) for maximum range in ideal conditions. Investigate how the range changes with variations in \ud835\udc63 and \ud835\udc54, observing proportional relationships. Discuss edge cases, such as when \ud835\udf03 = 0\u2218 (horizontal projection) or 90\u2218 (vertical projection).","title":"Range Analysis"},{"location":"Physics/1%20Mechanics/2.RangeAnalysis/#range-analysis","text":"Derive the range formula: \\( \\(R = \\frac{v^2 \\sin(2\\theta)}{g}\\) \\) . Analyze the dependence on \ud835\udf03: Identify the optimal angle (45\u2218) for maximum range in ideal conditions. Investigate how the range changes with variations in \ud835\udc63 and \ud835\udc54, observing proportional relationships. Discuss edge cases, such as when \ud835\udf03 = 0\u2218 (horizontal projection) or 90\u2218 (vertical projection).","title":"Range Analysis"},{"location":"Physics/1%20Mechanics/3.PracticalApplications/","text":"Practical Applications Examine real-world factors like air resistance, uneven terrain, and varying gravity (e.g., on other planets). Discuss scenarios like sports (soccer, basketball) and aerospace engineering (rocket launches). Explore how launch height affects the trajectory and range.","title":"Practical Applications"},{"location":"Physics/1%20Mechanics/3.PracticalApplications/#practical-applications","text":"Examine real-world factors like air resistance, uneven terrain, and varying gravity (e.g., on other planets). Discuss scenarios like sports (soccer, basketball) and aerospace engineering (rocket launches). Explore how launch height affects the trajectory and range.","title":"Practical Applications"},{"location":"Physics/1%20Mechanics/4.Implementation/","text":"Implementation Write a simulation program (e.g., in Python or MATLAB) using numerical methods to solve projectile motion equations. Generate plots for the range as a function of projection angle under varying initial conditions (e.g., \ud835\udc63, \ud835\udc54, launch height). Example visualization: polar or Cartesian plots highlighting key relationships. Visualization Sample Code (Python): python import numpy as np import matplotlib.pyplot as plt Parameters g = 9.8 # Gravity (m/s^2) v = 20 # Initial velocity (m/s) angles = np.linspace(0, np.pi/2, 100) # Projection angles in radians Range calculation ranges = (v**2 * np.sin(2 * angles)) / g Plotting plt.figure(figsize=(10, 6)) plt.plot(np.degrees(angles), ranges) plt.title('Projectile Range vs Angle of Projection') plt.xlabel('Angle (degrees)') plt.ylabel('Range (m)') plt.grid() plt.show() This script can be expanded to incorporate more complex parameters and real-world considerations. Would you like help implementing this simulation or deriving the equations in more detail? This is a fascinating topic, and I'd love to explore it further with you.","title":"Implementation"},{"location":"Physics/1%20Mechanics/4.Implementation/#implementation","text":"Write a simulation program (e.g., in Python or MATLAB) using numerical methods to solve projectile motion equations. Generate plots for the range as a function of projection angle under varying initial conditions (e.g., \ud835\udc63, \ud835\udc54, launch height). Example visualization: polar or Cartesian plots highlighting key relationships. Visualization Sample Code (Python): python import numpy as np import matplotlib.pyplot as plt","title":"Implementation"},{"location":"Physics/1%20Mechanics/4.Implementation/#parameters","text":"g = 9.8 # Gravity (m/s^2) v = 20 # Initial velocity (m/s) angles = np.linspace(0, np.pi/2, 100) # Projection angles in radians","title":"Parameters"},{"location":"Physics/1%20Mechanics/4.Implementation/#range-calculation","text":"ranges = (v**2 * np.sin(2 * angles)) / g","title":"Range calculation"},{"location":"Physics/1%20Mechanics/4.Implementation/#plotting","text":"plt.figure(figsize=(10, 6)) plt.plot(np.degrees(angles), ranges) plt.title('Projectile Range vs Angle of Projection') plt.xlabel('Angle (degrees)') plt.ylabel('Range (m)') plt.grid() plt.show() This script can be expanded to incorporate more complex parameters and real-world considerations. Would you like help implementing this simulation or deriving the equations in more detail? This is a fascinating topic, and I'd love to explore it further with you.","title":"Plotting"},{"location":"Physics/1%20Mechanics/5.InferencesNHypothesis%27/","text":"Inferences and Hypotheses","title":"Inferences and Hypotheses"},{"location":"Physics/1%20Mechanics/5.InferencesNHypothesis%27/#inferences-and-hypotheses","text":"","title":"Inferences and Hypotheses"},{"location":"Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"}]}